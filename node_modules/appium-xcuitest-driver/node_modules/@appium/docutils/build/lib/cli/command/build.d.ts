import { CommandModule, InferredOptionTypes } from 'yargs';
declare const _default: CommandModule<{}, InferredOptionTypes<Readonly<{
    reference: {
        describe: string;
        group: string;
        type: "boolean";
        default: boolean;
    };
    site: {
        describe: string;
        group: string;
        type: "boolean";
        default: boolean;
    };
    'site-dir': {
        alias: string;
        describe: string;
        group: string;
        nargs: number;
        requiresArg: true;
        type: "string";
        normalize: true;
        implies: string;
        defaultDescription: string;
    };
    'package-json': {
        defaultDescription: string;
        describe: string;
        group: string;
        nargs: number;
        normalize: true;
        requiresArg: true;
        type: "string";
    };
    title: {
        defaultDescription: string;
        describe: string;
        group: string;
        nargs: number;
        requiresArg: true;
        type: "string";
    };
    'tsconfig-json': {
        defaultDescription: string;
        describe: string;
        group: string;
        nargs: number;
        normalize: true;
        requiresArg: true;
        type: "string";
    };
    'mkdocs-yml': {
        defaultDescription: string;
        description: string;
        group: string;
        nargs: number;
        normalize: true;
        requiresArg: true;
        type: "string";
    };
    'typedoc-json': {
        defaultDescription: string;
        describe: string;
        group: string;
        nargs: number;
        normalize: true;
        requiresArg: true;
        type: "string";
    };
    all: {
        describe: string;
        group: string;
        implies: string;
        type: "boolean";
    };
    deploy: {
        describe: string;
        group: string;
        type: "boolean";
        implies: string;
    };
    push: {
        describe: string;
        group: string;
        type: "boolean";
        implies: string;
    };
    branch: {
        alias: string;
        describe: string;
        implies: string;
        group: string;
        type: "string";
        requiresArg: true;
        nargs: number;
        defaultDescription: string;
    };
    remote: {
        alias: string;
        describe: string;
        implies: string[];
        group: string;
        type: "string";
        requiresArg: true;
        nargs: number;
        defaultDescription: string;
    };
    prefix: {
        describe: string;
        implies: string[];
        group: string;
        type: "string";
        nargs: number;
        requiresArg: true;
    };
    message: {
        alias: string;
        describe: string;
        implies: string;
        group: string;
        type: "string";
        nargs: number;
        requiresArg: true;
    };
    'deploy-version': {
        describe: string;
        implies: string;
        group: string;
        type: "string";
        nargs: number;
        requiresArg: true;
        defaultDescription: string;
    };
    alias: {
        describe: string;
        implies: string;
        group: string;
        type: "string";
        nargs: number;
        requiresArg: true;
        defaultDescription: string;
    };
    rebase: {
        describe: string;
        implies: string[];
        group: string;
        type: "boolean";
    };
    serve: {
        describe: string;
        group: string;
        type: "boolean";
    };
    port: {
        alias: string;
        describe: string;
        group: string;
        type: "number";
        defaultDescription: string;
        implies: string;
        nargs: number;
        requiresArg: true;
    };
    host: {
        alias: string;
        describe: string;
        group: string;
        type: "string";
        nargs: number;
        requiresArg: true;
        implies: string;
        defaultDescription: string;
    };
}>>>;
export default _default;
//# sourceMappingURL=build.d.ts.map